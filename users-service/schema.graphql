# This is the prerequsite schema required
# for fedaration by the gateway
directive @boundary on OBJECT | FIELD_DEFINITION

# The Service type provides the gateway a schema
# to merge into the graph and a name/version to
# reference the service with
type Service {
  name: String!
  version: String!
  schema: String!
}

type Query {
  # The service query is used by the gateway when
  # the service is first registered
  service: Service!

  # the schema representing a User
  getUser(id: ID!): User @boundary
  makeRootUser(displayname: String!, email: String!, password: String!, confirmPassword: String!): Boolean
  loginUser(email:String!, password: String!): String
}

type User @boundary {
  # required by all services that add a field to
  id: ID! #TODO: can (if it's a subuser, the id will be [masterid]-[slaveid]) be done?

  displayname: String!

  groupname: String! #IMPORTANT: the ACL will be id:groupname NOT displayname:groupname

  email: String!

  #PW REGEX: /((?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[\W]).{8,64})/g
  #PW MSG: "This is not a valid password(8 to 64 characters long and contains a mix of upper and lower case characters, 1 numeric and 1 special character)"
  password: String!

  createdDate: String! #all three of these are autofilled columns(this is supported by postgres, they just need proper annotation)
  updatedDate: String #TODO: autogen these
  deletedDate: String #this is for soft deletes, we want to keep users that are deleted for 6 months, just in case

  confirmed: Boolean! #the user's email is confirmed
}